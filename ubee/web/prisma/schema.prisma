// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  bots          Bot[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Bot {
  id          String       @id @default(cuid())
  name        String
  description String
  personas    Persona[]
  paramValues ParamValue[]
  userId      String       @map("user_id")
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId], name: "Bot_UserId_Index")
  @@map("bot")
}

model Persona {
  id        String   @id @default(cuid())
  bot       Bot      @relation(fields: [botId], references: [id])
  botId     String   @map("bot_id")
  fileName  String   @map("file_name")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([botId], name: "Persona_BotId_Index")
  @@map("persona")
}

model Param {
  id          String       @id @default(cuid())
  name        String
  paramType   ParamType    @map("param_type")
  paramValues ParamValue[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("param")
}

model ParamValue {
  id        String   @id @default(cuid())
  bot       Bot      @relation(fields: [botId], references: [id])
  botId     String   @map("bot_id")
  param     Param    @relation(fields: [paramId], references: [id])
  paramId   String   @map("param_id")
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([botId], name: "ParamValue_BotId_Index")
  @@index([paramId], name: "ParamValue_ParamId_Index")
  @@map("param_value")
}

enum ParamType {
  String
  Number
  Boolean
  Object
  Array

  @@map("param_type")
}
